<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- 
The default skin class for Spark TabBar buttons.  

@see spark.components.TabBar
@see spark.skins.spark.TabBarSkin

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->

<s:SparkButtonSkin xmlns:fx="http://ns.adobe.com/mxml/2009" 
                   xmlns:s="library://ns.adobe.com/flex/spark" 
                   xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
                   minWidth="21" minHeight="21" 
                   alpha.disabled="0.5">
    
    <!-- host component -->
    <fx:Metadata>
        <![CDATA[ 
        /** 
        * @copy spark.skins.spark.ApplicationSkin#hostComponent
        */
        [HostComponent("spark.components.ButtonBarButton")]
        ]]>
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling" >
        
        import spark.components.TabBar;
        
        static private const exclusions:Array = ["labelDisplay"];
        
        /** 
         * @private
         */     
        override public function get colorizeExclusions():Array {return exclusions;}
        
        /**
         * @private
         */
        override protected function initializationComplete():void
        {
            useChromeColor = true;
            super.initializationComplete();
        }
        
        private var cornerRadius:Number = 4;
        
        
        /**
         *  @private
         *  This function creates the path data used by borderTop and selectedHighlight.
         */
        private function createPathData(isBorder:Boolean):String
        {
            var left:Number = 0;
            var right:Number = width;
            var top:Number = 0.5;
            var bottom:Number = height;
            
            var a:Number = cornerRadius * 0.292893218813453;
            var s:Number = cornerRadius * 0.585786437626905;
            
            // If the path is for the highlight,
            // Draw the vertical part of the selected tab highlight that's rendered 
            // with alpha=0.07.  The s:Path is configured to include only the left and 
            // right edges of an s:Rect, along with the top left,right rounded corners. 
            // Otherwise, we draw a full path.
            var path:String = "";
            path +=  "M " + left + " " + bottom;
            path += " L " + left + " " + (top + cornerRadius);
            path += " Q " + left + " " + (top + s) + " " + (left + a) + " " + (top + a);
            path += " Q " + (left + s) + " " + top + " " + (left + cornerRadius) + " " + top;
            
            if (isBorder)
                path += " L " + (right - cornerRadius) + " " + top;
            else
                path += " M " + (right - cornerRadius) + " " + top;
            
            path += " Q " + (right - s) + " " + top + " " + (right - a) + " " + (top + a);
            path += " Q " + right + " " + (top + s) + " " + right + " " + (top + cornerRadius);
            path += " L " + right + " " + bottom;
            
            return path;
        }
        
        /**
         *  @private
         *  The cornerRadius style is specified by the TabBar, not the button itself.   
         * 
         *  Rather than bind the corner radius properties of the s:Rect's in the markup 
         *  below to hostComponent.owner.getStyle("cornerRadius"), we reset them here, 
         *  each time a change in the value of the style is detected.  Note that each 
         *  corner radius property is explicitly initialized to the default value of 
         *  the style; the initial value of the private cornerRadius property.
         */
        private function updateCornerRadius():void
        {
            var cr:Number = getStyle("cornerRadius");
            if (cornerRadius != cr)
            {
                cornerRadius = cr;
                fill.topLeftRadiusX = cornerRadius;
                fill.topRightRadiusX = cornerRadius;
                highlightStroke.topLeftRadiusX = cornerRadius;
                highlightStroke.topRightRadiusX = cornerRadius;
            }
        }
        
        /**
         *  @private
         */
        override protected function updateDisplayList(unscaledWidth:Number, unscaleHeight:Number):void
        {
            updateCornerRadius();
            super.updateDisplayList(unscaledWidth, unscaledHeight);
        }
    </fx:Script>
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over" stateGroups="overStates" />
        <s:State name="down" stateGroups="downStates" />
        <s:State name="disabled" stateGroups="disabledStates" />
        <s:State name="upAndSelected" stateGroups="selectedStates, selectedUpStates" />
        <s:State name="overAndSelected" stateGroups="overStates, selectedStates" />
        <s:State name="downAndSelected" stateGroups="downStates, selectedStates" />
        <s:State name="disabledAndSelected" stateGroups="selectedUpStates, disabledStates, selectedStates" />
    </s:states>
    
    
    <!--- layer 2: fill @private-->
    <!--- @private -->
    <s:Rect id="fillbase" left="0" right="0" top="0" bottom="0" topLeftRadiusX="4" topRightRadiusX="4" width="72" height="24">
        <s:fill>
            <s:SolidColor color="#333333"/>
        </s:fill>
    </s:Rect>
    <s:Rect id="fill" left="1" right="1" top="1" bottom="1" topLeftRadiusX="4" topRightRadiusX="4" width="70" height="22">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0xFFFFFF"
                                 alpha.selectedStates="0.05" color.selectedStates="0"
                                 alpha.down="0.05" color.down="0"
                                 alpha.over="0.15"
                                 alpha="0.08" />
                <s:GradientEntry color="0xFFFFFF" 
                                 alpha.selectedStates="0" color.selectedStates="0" ratio.selectedStates=".8"
                                 alpha.down="0" color.down="0" ratio.down=".8"
                                 alpha.over="0.05" 
                                 alpha="0.03"/>
            </s:LinearGradient>
        </s:fill>
    </s:Rect>
    
    
    <s:Rect id="highlightStroke" left="1" right="1" top="1" bottom="1" topLeftRadiusX="4" topRightRadiusX="4"
            >
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0xFFFFFF" 
                                 alpha="0.1" 
                                 alpha.selectedUpStates="0.2"
                                 alpha.overAndSelected="0.2"
                                 alpha.downStates="0.2"
                                 color.selectedStates="0x000000"
                                 color.down="0x000000"/>
                <s:GradientEntry color="0xFFFFFF" 
                                 alpha="0.03" 
                                 alpha.selectedUpStates="0"
                                 alpha.overAndSelected="0"
                                 alpha.downStates="0"
                                 color.selectedStates="0x000000"
                                 color.down="0x000000"
                                 ratio.selectedStates=".8"
                                 ratio.down=".8"/>
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
    
    <s:Rect id="lowlightStroke" left="2" right="2" top="2" bottom="2" topLeftRadiusX="4" topRightRadiusX="4"
            >
        <s:stroke>
            <s:LinearGradientStroke rotation="90" weight="1">
                <s:GradientEntry color="0x000000" 
                                 alpha="0.08"/>
                <s:GradientEntry color="0x000000" 
                                 alpha="0.03" 
                                 alpha.selectedStates="0"
                                 alpha.down="0"
                                 ratio.selectedStates=".8"
                                 ratio.down=".8"
                                 />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
    
    <s:Group id="barMask" left="0" right="0" top="0" bottom="0" bottom.down="1" bottom.selectedStates="1">
        <s:Rect width="100%" height="100%">
            <s:fill>
                <s:SolidColor color="#FF0000"/>
            </s:fill>
        </s:Rect>
    </s:Group>
    
    <s:Rect id="border" left="0" right="0" top="0" bottom="0" topLeftRadiusX="4" topRightRadiusX="4" 
            mask="{barMask}">
        <s:stroke>
            <s:SolidColorStroke color="#000000"/>
        </s:stroke>
    </s:Rect>
    <s:Rect left="0" bottom="0" width="1" height="1">
        <s:fill>
            <s:SolidColor/>
        </s:fill>
    </s:Rect>
    <s:Rect right="0" bottom="0" width="1" height="1">
        <s:fill>
            <s:SolidColor/>
        </s:fill>
    </s:Rect>
    
    <!-- layer 8: text -->
    <!--- @copy spark.components.supportClasses.ButtonBase#labelDisplay -->
    <s:Label id="labelDisplay"
             textAlign="center"
             verticalAlign="middle"
             maxDisplayedLines="1"
             horizontalCenter="0" verticalCenter="1"
             left="10" right="10" top="2" bottom="2">
    </s:Label>
    
</s:SparkButtonSkin>
