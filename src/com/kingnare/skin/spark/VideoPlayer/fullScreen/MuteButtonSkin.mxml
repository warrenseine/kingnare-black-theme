<?xml version="1.0" encoding="utf-8"?>

<!--

ADOBE SYSTEMS INCORPORATED
Copyright 2008 Adobe Systems Incorporated
All Rights Reserved.

NOTICE: Adobe permits you to use, modify, and distribute this file
in accordance with the terms of the license agreement accompanying it.

-->

<!--- The default skin class for the mute button of a Spark VideoPlayer component  
in the normal skin state. The normal skin state means the component is not in 
one of the <code>fullScreen</code> skin states.  

@see spark.components.VideoPlayer

@langversion 3.0
@playerversion Flash 10
@playerversion AIR 1.5
@productversion Flex 4
-->
<s:SparkSkin xmlns:fx="http://ns.adobe.com/mxml/2009" xmlns:s="library://ns.adobe.com/flex/spark" 
             xmlns:fb="http://ns.adobe.com/flashbuilder/2009" creationComplete="init()"
             alpha.disabled="0.5">
    
    <!-- host component -->
    <fx:Metadata>
        /** 
        * @copy spark.skins.spark.ApplicationSkin#hostComponent
        */
        [HostComponent("spark.components.mediaClasses.MuteButton")]
    </fx:Metadata>
    
    <fx:Script fb:purpose="styling">
        <![CDATA[
            /* Define the skin elements that should not be colorized. */
            static private const exclusions:Array = ["volumeSymbol"];
            
            /**
             * @private
             */
            override public function get colorizeExclusions():Array {return exclusions;}
            
            /* Define the symbol fill items that should be colored by the "symbolColor" style. */
            static private const symbols:Array = [];
            
            /**
             * @private
             */
            override public function get symbolItems():Array {return symbols};
            
            /**
             * @private
             */
            override protected function initializationComplete():void
            {
                useChromeColor = true;
                super.initializationComplete();
            }
        ]]>
    </fx:Script>
    
    <fx:Script>
        <![CDATA[
            import mx.events.FlexEvent;
            import spark.components.mediaClasses.VolumeBar;
            
            private function init():void
            {
                // this is essentially just binding code.  Anytime the volume changes, 
                // let us know.
                volume = hostComponent.muted ? 0 : hostComponent.volume;
                hostComponent.addEventListener(FlexEvent.VALUE_COMMIT, valueCommitHandler);
                hostComponent.addEventListener(FlexEvent.MUTED_CHANGE, valueCommitHandler);
            }
            
            private function valueCommitHandler(event:Event):void
            {
                volume = hostComponent.muted ? 0 : hostComponent.volume;
            }
            
            private var _volume:Number = 1;
            
            /**
             *  The volume of the video player, specified as a value between 0 and 1.
             */
            public function get volume():Number
            {
                return _volume;
            }
            
            public function set volume(value:Number):void
            {
                if (value == _volume)
                    return;
                
                _volume = value;
                
                var bar1:Array = [bar1_1, bar1_2, bar1_3]; // 0-.25
                var bar2:Array = [bar2_1, bar2_2, bar2_3]; // .25-.5
                var bar3:Array = [bar3_1, bar3_2, bar3_3]; // .5-.75
                var bar4:Array = [bar4_1, bar4_2, bar4_3]; // .75-.1
                var bars:Array = [bar1, bar2, bar3, bar4];
                
                var curValue:Number = 0;
                for (var i:int = 0; i < bars.length; i++)
                {
                    if (value <= curValue)
                        setAlphaTo(bars[i], 0);
                    else if (value >= (curValue + 0.25))
                        setAlphaTo(bars[i], 1);
                    else
                        setAlphaTo(bars[i], (value-curValue)*4);
                    
                    curValue += 0.25;
                }
            }
            
            private function setAlphaTo(bar:Array, alpha:Number):void
            {
                for (var i:int = 0; i < bar.length; i++)
                {
                    bar[i].alpha = alpha;
                }
            }
        ]]>
    </fx:Script>
    
    
    <!-- states -->
    <s:states>
        <s:State name="up" />
        <s:State name="over"/>
        <s:State name="down" />
        <s:State name="disabled" />
    </s:states>
    <s:Rect left="0" right="0" top="0" bottom="0" width="38" height="24">
        <s:fill>
            <s:LinearGradient rotation="90">
                <s:GradientEntry color="0x595959" alpha=".9" alpha.over="1"/>
                <s:GradientEntry color="0x494949" alpha=".9" alpha.over="1"/>
            </s:LinearGradient>
        </s:fill>
        <s:stroke>
            <s:SolidColorStroke caps="none" color="#000000" joints="miter" miterLimit="4" weight="1"/>
        </s:stroke>
    </s:Rect>
    <!-- layer 1: title bar highlight -->
    <!--- @private -->
    <s:Rect left="1" right="1" top="1" bottom="1">
        <s:stroke>
            <s:LinearGradientStroke rotation="90"  joints="miter" miterLimit="4" weight="1">
                <s:GradientEntry color="#666666" />
                <s:GradientEntry color="#4D4D4D" />
            </s:LinearGradientStroke>
        </s:stroke>
    </s:Rect>
    
    <!-- layer 5: border - put on top of the fill so it doesn't disappear when scale is less than 1 -->
    <s:Rect left="0" right="0" top="0" bottom="0" width="38" height="24">
        <s:stroke>
            <s:SolidColorStroke color="0x131313" />
        </s:stroke>
    </s:Rect>
    
    <!--- Defines the volume symbol. -->
    <s:Group horizontalCenter="0" verticalCenter="0" id="volumeSymbol" alpha=".8" alpha.over="1">
        
        <!-- big trapezoid in center -->
        <!--<s:Path winding="evenOdd" data="M 9 13 L 9 0 L 4 4 L 4 9 L 9 13 Z">-->
        <s:Path winding="evenOdd" data="M 4 4 L 5 4 L 5 3  L 6 3 L 6 2 L 7 2 L7 1 L 9 1 L 9 12 L 7 12 L 7 11 L 6 11 L 6 10 L 5 10 L 5 9 L 4 9 L 4 4 Z">
            <s:fill>
                <!--- @private -->
                <s:SolidColor color="0xFFFFFF" id="trapezoid1"/>
            </s:fill>
        </s:Path>
        
        <!-- small trapezoid on left -->
        <s:Path winding="evenOdd" data="M 3 9 L 3 4 L 1 4 L 1 9 L 3 9 Z">
            <s:fill>
                <!--- @private -->
                <s:SolidColor color="0xFFFFFF" id="trapezoid2"/>
            </s:fill>
        </s:Path>
        
        <!-- volume bars -->
        
        <!-- big volume bar representing volume values [.75, 1] -->
        
        <s:Rect x="16" y="1" width="1" height="11"
                y.disabled="2" height.disabled="9">
            <s:fill>
                <s:LinearGradient>
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".1" id="bar4_1" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".2" id="bar4_2" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".3" id="bar4_3" />
                </s:LinearGradient>
            </s:fill>
        </s:Rect>
        
        <s:Rect x="14" y="3" width="1" height="7">
            <s:fill>
                <s:LinearGradient>
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".1" id="bar3_1" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".2" id="bar3_2" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".3" id="bar3_3" />
                </s:LinearGradient>
            </s:fill>
        </s:Rect>
        
        <s:Rect x="12" y="4" width="1" height="5">
            <s:fill>
                <s:LinearGradient>
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".1" id="bar2_1" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".2" id="bar2_2" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".3" id="bar2_3" />
                </s:LinearGradient>
            </s:fill>
        </s:Rect>
        
        <s:Rect width="1" x="10" y="5" height="3" >
            <s:fill>
                <s:LinearGradient>
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".1" id="bar1_1" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".2" id="bar1_2" />
                    <!--- @private -->
                    <s:GradientEntry color="0xFFFFFF" ratio=".3" id="bar1_3" />
                </s:LinearGradient>
            </s:fill>
        </s:Rect>
    </s:Group>
</s:SparkSkin>